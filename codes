// code
// spiral matrix 2 leetcode
Input: 3
Output:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]
 vector<vector<int>> generateMatrix(int n) {
        
         int tne=n*n , a=1;
       vector<vector<int>> ans(n, vector<int >(n,0));
       int minr=0 , minc=0, maxr=n-1, maxc= n-1;
       
       while(minr<=maxr && minc<=maxc)
       {
           //left ---->  minr, ( minc - maxc)
           for(int i= minc;i<=maxc  ;i++)
           {
               ans[minr][i] =a;
               a++;
           }
           minr++;
           //down       ( minr -maxr ),maxc
            for(int i=minr;i<=maxr ;i++)
           {
               ans[i][maxc] =a;
                a++;
           }
           maxc--;
           //right <----- maxr ( maxc -minc)
             for(int i=maxc;i>=minc ;i--)
           {
               ans[maxr][i] =a;
                 a++;
           }
           maxr--;
           //up        minc, (maxr , minr)
             for(int i=maxr;i>=minr   ;i--)
           {
               ans[i][minc]= a;
                 a++;
           }
           minc++;
       }
        
      return ans;

    }
    
////////////////////////////////////////////////////////////////
// spiral matrix 3
Input: R = 5, C = 6, r0 = 1, c0 = 4
Output: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],
[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]

Ans:
vector<vector<int>> spiralMatrixIII(int R, int C, int r0, int c0) {
        
        vector<vector<int>> ans;
        vector<int> dir={0,1,0,-1,0}; // direction vector
        
        ans.push_back({r0,c0});  // in java ans[++1] = new int []{r0,c0}   ;
        int i=1;
        int d=0; // direction variable
        int len=0; 
        
        while( i< R*C)
        {
            if(d== 0 || d== 2)
            {
                len++;
            }
            for(int k=0;k<len;k++)
            {
                r0 += dir[d];
                c0 += dir[d+1];
                
                if(r0>=0 && c0>=0 && r0<R && c0<C)
                {
                    ans.push_back({r0,c0}); i++;
                }
            }
            d= (++d) % 4;
        }
        return ans;
    }


