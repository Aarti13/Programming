// code
// spiral matrix 2 leetcode
Input: 3
Output:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]
 vector<vector<int>> generateMatrix(int n) {
        
         int tne=n*n , a=1;
       vector<vector<int>> ans(n, vector<int >(n,0));
       int minr=0 , minc=0, maxr=n-1, maxc= n-1;
       
       while(minr<=maxr && minc<=maxc)
       {
           //left ---->  minr, ( minc - maxc)
           for(int i= minc;i<=maxc  ;i++)
           {
               ans[minr][i] =a;
               a++;
           }
           minr++;
           //down       ( minr -maxr ),maxc
            for(int i=minr;i<=maxr ;i++)
           {
               ans[i][maxc] =a;
                a++;
           }
           maxc--;
           //right <----- maxr ( maxc -minc)
             for(int i=maxc;i>=minc ;i--)
           {
               ans[maxr][i] =a;
                 a++;
           }
           maxr--;
           //up        minc, (maxr , minr)
             for(int i=maxr;i>=minr   ;i--)
           {
               ans[i][minc]= a;
                 a++;
           }
           minc++;
       }
        
      return ans;

    }
    
////////////////////////////////////////////////////////////////
// spiral matrix 3
Input: R = 5, C = 6, r0 = 1, c0 = 4
Output: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],
[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]

Ans:
vector<vector<int>> spiralMatrixIII(int R, int C, int r0, int c0) {
        
        vector<vector<int>> ans;
        vector<int> dir={0,1,0,-1,0}; // direction vector
        
        ans.push_back({r0,c0});  // in java ans[++1] = new int []{r0,c0}   ;
        int i=1;
        int d=0; // direction variable
        int len=0; 
        
        while( i< R*C)
        {
            if(d== 0 || d== 2)
            {
                len++;
            }
            for(int k=0;k<len;k++)
            {
                r0 += dir[d];
                c0 += dir[d+1];
                
                if(r0>=0 && c0>=0 && r0<R && c0<C)
                {
                    ans.push_back({r0,c0}); i++;
                }
            }
            d= (++d) % 4;
        }
        return ans;
    }
//////////////////////////////////////////////////////////////
// rotate the 2D matrix 90 degree in place no extra space using
// 1. tranpose the matrix using upper transpose method 2 then swap the cols

vector<vector<int>> transpose(vector<vector<int>>& A) {
       
        vector<vector<int>> ans(A[0].size() , vector<int>(A.size() , 0));
        //tranpose
        for(int i=0;i<A[0].size();i++)
        {
            for(int j=0;j<A.size();j++) // for upper trangular j=i;
            {
                ans[i][j]=A[j][i];
       
            }
        }
        //swap   
        for(int i=0;i<ans.size();i++)
        {
            int r=0 , c=A.size()-1;
            while(r<c){
                int temp=ans[i][r];
                ans[i][r]=ans[i][c];
                ans[i][c]=temp;
                r++;
                c--;
            }
            
        }
        
        return ans;
    }

///////////////////////////////////////////
single number 3

Bit manipulation method(Intuitive approach) O(N) time 

   int singleNumber(vector<int>& nums) {
         
       // Bit manipulation method: O( n ) 
      /*  int one=0;
        int two=0;
        for(int i=0;i<nums.size();i++)
        {
            one = (nums[i] ^ one ) & (~ two);
            two = (nums[i] ^ two ) & (~ one);
        }
        return one; */
        
   
        // counting set Bits  : O( 32* N )
        // loop for all 32 bits then count the no of set bits for each ele by shifting them twice 
        
        int ans=0, c=0;
        unsigned int shift=1;
        for(int i=0;i<32;i++)
        {
            c=0;
            for(int n: nums)
            {
                if(n & shift )  // counting the no of set bits
                    c++; // count
            }
            if( c % 3 != 0)
                ans += shift ;   // add values 1+2....
                
            shift *= 2;
        }
        return ans;
    }
    
  ////////////////////////////////////////////
  single number 3 
  
   vector<int> singleNumber(vector<int>& nums) {
      
        vector<int> ans;
       
        int x=0,a=0,b=0;
        for(int e: nums)
            x ^= e;                 //1. xor all ele to delete all twice occurring ele 
        
        unsigned int rmb= x & ~(x - 1); //2. cut rightmost set bit
        
        for(int e:nums) // 3. divide them in two set 
        {
            if( ( e & rmb ) == 0)
                b ^= e;
            else
                a ^= e;
        }
            ans.push_back(a);
            ans.push_back(b);
        return ans; 
 
    }
    ////////////////////////////////////////////////////
    
    count all nodes in complete binary tree:
    
    1st method but not gud for interview purpose: inorder preoder or postorder traversal  O(N)
    int countNodes(TreeNode* root) {
        
       if(root == NULL) return -1;
       return 1 + countNodes(root->left);
        }
        
        // 2nd method with O( log(2N +1) * log(N+ 1) ) ~ O(logN * logN ) 
        int countNodes(TreeNode* root) {
        
       // using the property of complete binary tree ie all the level till 2nd last are completely filled
       // only in last level the nodes may or may not be filled with elements
        // so there is two cases arrises 1 if( CBT = PBT ) perfect binary tree the no of nodes = 2^ level -1
        // 2. if( CBT != PBT ) then calculate left extreme depth and right extreme depth if same then nodes = 2^        level -1   otherwise root->left  + root->right + 1 ans 
       if(root == NULL) return 0;
        // for left extreme depth 
        int led=1;
        TreeNode* l= root->left;
        while(l)
        {
            l=l->left;
            led += 1;
        }
        
         // for right extreme depth 
        int red=1;
        TreeNode* r= root->right;
        while(l)
        {
            r=r->right;
            red += 1;
        }
        
        if( led == red)
        {
           return  pow(2,led)-1;
        }
        
        return 1 + countNodes(root->left) + countNodes(root->right);
  }
