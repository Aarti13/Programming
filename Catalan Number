class Solution {
public:
    int numTrees(int n) {
        
        // Program for nTh Catalan Number.
        // this wil be solved using catalan no's as 1,1,2,5,14.....
        // sum(c(i) * c(n-i-1) )
        //its Applications: 
        //1. count Unique Binary Search Tree  with n nodes 
        //2. count Full Binary Search Tree  with n+1 leaves
        
        // It Can be solved using 3 methods:
        
        // 1. Using Recursion:  T= exponential as 0,0,2,8...
        //https://stackoverflow.com/questions/27371612/catalan-numbers-recursive-function-time-complexity
        
        
       /* if( n == 1 || n == 0 ) return 1;
        
        int ans=0;
        for(int i=0 ; i< n ; i++)
        {
            ans += numTrees( i ) * numTrees( n - i -1) ;
        } 
        
        return ans; */
        
        //2. Using DP: T= O( n*n)
       
        vector<int > arr ( n+1 ,0 );
        arr[0]=1;
        arr[1]=1;
        
        for(int i=2 ; i<=n ; i++)
        {
            for( int j=0;j< i ;j++)
              arr[i] += arr[j]  * arr[i - j -1] ;
        }
         
 
        
        BINOMIAL COEFFICIENT:-     T=O(n)

// Returns value of Binomial Coefficient C(n, k) 
unsigned long int binomialCoeff(unsigned int n, unsigned int k) 
{ 
	unsigned long int res = 1; 

	// Since C(n, k) = C(n, n-k) 
	if (k > n - k) 
		k = n - k; 

	// Calculate value of [n*(n-1)*---*(n-k+1)] / [k*(k-1)*---*1] 
	for (int i = 0; i < k; ++i) 
	{ 
		res *= (n - i); 
		res /= (i + 1); 
	} 

	return res; 
} 

// A Binomial coefficient based function to find nth catalan 
// number in O(n) time 
unsigned long int catalan(unsigned int n) 
{ 
	// Calculate value of 2nCn 
	unsigned long int c = binomialCoeff(2*n, n); 

	// return 2nCn/(n+1) 
	return c/(n+1); 
} 


        
        
        return arr[n];
    }
};
